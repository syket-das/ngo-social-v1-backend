// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address {
  excat   String?
  city    String?
  state   String?
  country String?
  zipCode String?
  lat     String?
  lng     String?
}

type Media {
  key String
  url String
}

enum Role {
  USER
  NGO
  MODERATOR
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String
  email      String    @unique
  password   String?
  phone      String?
  address    Address?
  active     Boolean   @default(true)
  otp        Int?
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  role       Role      @default(USER)

  createdPosts            Post[]
  votesGivenOnPost        PostVote[]
  commentsOnPost          PostComment[]
  votesGivenOnPostComment PostCommentVote[]

  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  createdIssues            Issue[]
  votesGivenOnIssue        IssueVote[]
  commentsOnIssue          IssueComment[]
  votesGivenOnIssueComment IssueCommentVote[]
}

model Ngo {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  type                    String
  email                   String            @unique
  password                String?
  phone                   String
  address                 Address
  active                  Boolean           @default(true)
  otp                     Int?
  verified                Boolean           @default(false)
  verifiedAt              DateTime?
  role                    Role              @default(NGO)
  createdPosts            Post[]
  votesGivenOnPost        PostVote[]
  commentsOnPost          PostComment[]
  votesGivenOnPostComment PostCommentVote[]

  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  createdIssues            Issue[]
  votesGivenOnIssue        IssueVote[]
  commentsOnIssue          IssueComment[]
  votesGivenOnIssueComment IssueCommentVote[]
}

model PostVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id])
  postId   String   @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  ngo      Ngo?     @relation(fields: [ngoId], references: [id])
  ngoId    String?  @db.ObjectId
  voteType VoteType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCommentVote {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  comment   PostComment @relation(fields: [commentId], references: [id])
  commentId String      @db.ObjectId
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @db.ObjectId
  ngo       Ngo?        @relation(fields: [ngoId], references: [id])
  ngoId     String?     @db.ObjectId
  voteType  VoteType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model PostComment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  post    Post    @relation(fields: [postId], references: [id])
  postId  String  @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId  String? @db.ObjectId
  ngo     Ngo?    @relation(fields: [ngoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ngoId   String? @db.ObjectId
  comment String

  votes PostCommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  media       Media[]

  address Address?

  ownUser   User?   @relation(fields: [ownUserId], references: [id])
  ownUserId String? @db.ObjectId

  ownNgo   Ngo?    @relation(fields: [ownNgoId], references: [id])
  ownNgoId String? @db.ObjectId

  votes    PostVote[]
  comments PostComment[]

  active    Boolean @default(true)
  suspended Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  issue    Issue    @relation(fields: [issueId], references: [id])
  issueId  String   @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  ngo      Ngo?     @relation(fields: [ngoId], references: [id])
  ngoId    String?  @db.ObjectId
  voteType VoteType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueCommentVote {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String       @db.ObjectId
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?      @db.ObjectId
  ngo       Ngo?         @relation(fields: [ngoId], references: [id])
  ngoId     String?      @db.ObjectId
  voteType  VoteType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model IssueComment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  issue   Issue   @relation(fields: [issueId], references: [id])
  issueId String  @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId  String? @db.ObjectId
  ngo     Ngo?    @relation(fields: [ngoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ngoId   String? @db.ObjectId
  comment String

  votes IssueCommentVote[]

  parent   IssueComment?  @relation("IssueCommentToIssueComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?        @db.ObjectId
  children IssueComment[] @relation("IssueCommentToIssueComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  media       Media[]

  address Address?

  ownUser   User?   @relation(fields: [ownUserId], references: [id])
  ownUserId String? @db.ObjectId

  ownNgo   Ngo?    @relation(fields: [ownNgoId], references: [id])
  ownNgoId String? @db.ObjectId

  resolved Boolean @default(false)

  active    Boolean @default(true)
  suspended Boolean @default(false)

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  votes     IssueVote[]
  comments  IssueComment[]
}
