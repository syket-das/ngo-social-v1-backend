// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address {
  addressLine1 String?
  street       String?
  city         String?
  state        String?
  country      String?
  zipCode      String?
  lat          Float?
  lng          Float?
}

type Media {
  key  String
  url  String
  type String
}

enum Role {
  USER
  NGO
  MODERATOR
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum Tags {
  EDUCATION
  HEALTH
  ENVIRONMENT
  ANIMALS
  DISASTER
  POVERTY
  HUMAN_RIGHT
  CHILD_RIGHT
  AWARENESS
  OTHERS
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName                 String
  email                    String             @unique
  bio                      String?
  profession               String?
  interests                String[]
  password                 String?
  phone                    String?
  profileImage             Media?
  address                  Address?
  active                   Boolean            @default(true)
  otp                      Int?
  verified                 Boolean            @default(false)
  verifiedAt               DateTime?
  role                     Role               @default(USER)
  createdPosts             Post[]
  votesGivenOnPost         PostVote[]
  commentsOnPost           PostComment[]
  votesGivenOnPostComment  PostCommentVote[]
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  createdIssues            Issue[]
  votesGivenOnIssue        IssueVote[]
  commentsOnIssue          IssueComment[]
  votesGivenOnIssueComment IssueCommentVote[]
  createdCampaigns         Campaign[]         @relation("UserToCampaign")
  joinedCampaignIds        String[]           @db.ObjectId
  joinedCampaigns          Campaign[]         @relation(fields: [joinedCampaignIds], references: [id])

  memberOfNgoIds String[]       @db.ObjectId
  memberOfNgos   Ngo[]          @relation(fields: [memberOfNgoIds], references: [id])
  notifications  Notification[]
  fundRaisings   FundRaising[]
  userPoints     UserPoints[]
}

model Ngo {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String
  bio          String?
  email        String  @unique
  password     String?
  phone        String
  profileImage Media?

  address    Address
  active     Boolean   @default(true)
  otp        Int?
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  role       Role      @default(NGO)

  memberIds String[] @db.ObjectId
  members   User[]   @relation(fields: [memberIds], references: [id])

  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  createdPosts             Post[]
  votesGivenOnPost         PostVote[]
  commentsOnPost           PostComment[]
  votesGivenOnPostComment  PostCommentVote[]
  createdIssues            Issue[]
  votesGivenOnIssue        IssueVote[]
  commentsOnIssue          IssueComment[]
  votesGivenOnIssueComment IssueCommentVote[]
  createdCampaigns         Campaign[]         @relation("NgoToCampaign")
  joinedCampaignIds        String[]           @db.ObjectId
  joinedCampaigns          Campaign[]         @relation(fields: [joinedCampaignIds], references: [id])
  notifications            Notification[]
  fundRaisings             FundRaising[]
  ngoPoints                NgoPoints[]
}

model UserPoints {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  donation     Int      @default(0)
  intellectual Int      @default(0)
  volunteer    Int      @default(0)
  metaData     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NgoPoints {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ngo          Ngo      @relation(fields: [ngoId], references: [id])
  ngoId        String   @db.ObjectId
  donation     Int      @default(0)
  intellectual Int      @default(0)
  volunteer    Int      @default(0)
  metaData     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PostVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id])
  postId   String   @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  ngo      Ngo?     @relation(fields: [ngoId], references: [id])
  ngoId    String?  @db.ObjectId
  voteType VoteType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCommentVote {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  comment   PostComment @relation(fields: [commentId], references: [id])
  commentId String      @db.ObjectId
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @db.ObjectId
  ngo       Ngo?        @relation(fields: [ngoId], references: [id])
  ngoId     String?     @db.ObjectId
  voteType  VoteType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model PostComment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  post    Post    @relation(fields: [postId], references: [id])
  postId  String  @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId  String? @db.ObjectId
  ngo     Ngo?    @relation(fields: [ngoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ngoId   String? @db.ObjectId
  comment String

  votes PostCommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  media       Media[]

  address Address?

  ownUser   User?   @relation(fields: [ownUserId], references: [id])
  ownUserId String? @db.ObjectId

  ownNgo   Ngo?    @relation(fields: [ownNgoId], references: [id])
  ownNgoId String? @db.ObjectId

  tags Tags[] @default([])

  votes    PostVote[]
  comments PostComment[]

  active    Boolean @default(true)
  suspended Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  issue    Issue    @relation(fields: [issueId], references: [id])
  issueId  String   @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  ngo      Ngo?     @relation(fields: [ngoId], references: [id])
  ngoId    String?  @db.ObjectId
  voteType VoteType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueCommentVote {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String       @db.ObjectId
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?      @db.ObjectId
  ngo       Ngo?         @relation(fields: [ngoId], references: [id])
  ngoId     String?      @db.ObjectId
  voteType  VoteType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model IssueComment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  issue   Issue   @relation(fields: [issueId], references: [id])
  issueId String  @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId  String? @db.ObjectId
  ngo     Ngo?    @relation(fields: [ngoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ngoId   String? @db.ObjectId
  comment String

  votes IssueCommentVote[]

  parent   IssueComment?  @relation("IssueCommentToIssueComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?        @db.ObjectId
  children IssueComment[] @relation("IssueCommentToIssueComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  media       Media[]
  tags        Tags[]  @default([])

  address Address?

  ownUser   User?   @relation(fields: [ownUserId], references: [id])
  ownUserId String? @db.ObjectId

  ownNgo   Ngo?    @relation(fields: [ownNgoId], references: [id])
  ownNgoId String? @db.ObjectId

  resolved Boolean @default(false)

  active    Boolean @default(true)
  suspended Boolean @default(false)

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  votes     IssueVote[]
  comments  IssueComment[]
}

model Campaign {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  ownUser   User?   @relation("UserToCampaign", fields: [ownUserId], references: [id])
  ownUserId String? @db.ObjectId
  ownNgo    Ngo?    @relation("NgoToCampaign", fields: [ownNgoId], references: [id])
  ownNgoId  String? @db.ObjectId

  title       String
  description String
  motto       String
  tags        Tags[] @default([])

  media Media[]

  virtual Boolean  @default(false)
  address Address?

  fundsRequired Float @default(0)

  joinedUsers   User[]   @relation(fields: [joinedUserIds], references: [id])
  joinedUserIds String[] @db.ObjectId

  joinedNgos   Ngo[]    @relation(fields: [joinedNgoIds], references: [id])
  joinedNgoIds String[] @db.ObjectId

  active    Boolean @default(true)
  suspended Boolean @default(false)

  startDate DateTime
  endDate   DateTime

  transactions Transaction[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  campaignBroadcasts CampaignBroadcast[]
}

model CampaignBroadcast {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String   @db.ObjectId

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  ngo     Ngo?    @relation(fields: [ngoId], references: [id])
  ngoId   String? @db.ObjectId
  message String
  link    String?

  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FundRaising {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
  ngo         Ngo?      @relation(fields: [ngoId], references: [id])
  ngoId       String?   @db.ObjectId
  amount      Float
  title       String
  description String
  media       Media[]
  active      Boolean   @default(true)
  suspended   Boolean   @default(false)
  address     Address
  startDate   DateTime?
  endDate     DateTime?

  transactions Transaction[]
  tags         Tags[]        @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  donorRole Role
  donorId   String

  amount Float
  status TransactionStatus @default(PENDING)

  refunded     Boolean @default(false)
  refundReason String?

  gatewayTransactionId String?
  gatewayTransaction   Json?

  fundRaising   FundRaising? @relation(fields: [fundRaisingId], references: [id])
  fundRaisingId String?      @db.ObjectId
  campaign      Campaign?    @relation(fields: [campaignId], references: [id])
  campaignId    String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
